const prisma = require('../config/prisma');
const dayjs = require('dayjs');
const utc = require("dayjs/plugin/utc");
const xss = require('xss');
const validator = require('validator');
dayjs.extend(utc);

exports.getTables = async (req, res) => {
    try {
        const { selectedTime } = req.query;

        console.log("üîç (Query) selectedTime (raw):", selectedTime);

        let whereReservation = {
            status: { not: "CANCELLED" },
        };

        if (selectedTime) {
            const cleanTime = xss(selectedTime.trim());
            console.log("‚úÖ (Sanitized) selectedTime:", cleanTime);

            const parsedDate = dayjs.utc(cleanTime);
            console.log("üß™ (Parsed) isValid:", parsedDate.isValid());

            if (!parsedDate.isValid()) {
                console.error("‚ùå parsedDate ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", parsedDate.format());
                return res.status(400).json({ message: "‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
            }

            const selected = parsedDate.toDate();
            const before = new Date(selected.getTime() - 3 * 60 * 60 * 1000);
            const after = new Date(selected.getTime() + 3 * 60 * 60 * 1000);

            console.log("üïê Time Window:");
            console.log("   ‚Üí selected:", selected.toISOString());
            console.log("   ‚Üí before:", before.toISOString());
            console.log("   ‚Üí after:", after.toISOString());

            whereReservation = {
                ...whereReservation,
                time: {
                    gte: before,
                    lt: after,
                },
            };
        } else {
            console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ selectedTime ‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å frontend");
        }

        const tables = await prisma.table.findMany({
            select: {
                id: true,
                tableNumber: true,
                status: true,
                reservations: {
                    where: whereReservation,
                    select: {
                        time: true,
                        status: true,
                    },
                },
            },
        });

        console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${tables.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

        res.status(200).json({ message: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", tables });

    } catch (error) {
        console.error("‚ùå [getTables] Server Error:", error);
        res.status(500).json({ message: "Server Error" });
    }
};

exports.getTableByNumber = async (req, res) => {
    try {
        const rawNumber = xss(req.params.number);
        const number = validator.toInt(rawNumber);

        console.log("üîç ‡∏£‡∏±‡∏ö param ‡πÇ‡∏ï‡πä‡∏∞:", rawNumber, "‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç:", number);

        if (isNaN(number)) {
            console.warn("‚ùå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç:", rawNumber);
            return res.status(400).json({ message: "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        const table = await prisma.table.findUnique({
            where: { tableNumber: number },
            select: { id: true, tableNumber: true },
        });

        if (!table) {
            console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç:", number);
            return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ" });
        }

        console.log("‚úÖ ‡∏û‡∏ö‡πÇ‡∏ï‡πä‡∏∞:", table);

        res.json({ tableId: table.id, tableNumber: table.tableNumber });
    } catch (error) {
        console.error("‚ùå [getTableByNumber] Server Error:", error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏ï‡πä‡∏∞" });
    }
};
