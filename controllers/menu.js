const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()
const fs = require('fs')
const path = require('path')
const cloudinary = require('../utils/cloudinary')
const xss = require("xss");
const validator = require("validator");


exports.createMenu = async (req, res) => {

    console.log("üî•üî•üî• CreateMenu called");
    console.log("üì¶ req.body:", req.body);
    console.log("üñº req.file:", req.file);

    try {
        console.log("üì• req.body:", req.body);
        console.log("üñº req.file:", req.file);

        const name = xss(req.body.name);
        const description = xss(req.body.description || "");
        const price = validator.toFloat(xss(req.body.price));
        const categoryId = validator.toInt(xss(req.body.categoryId));
        const imageFile = req.file;

        // ‚úÖ ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° log ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        console.log("‚úÖ Parsed:", { name, description, price, categoryId });

        if (!name || !price || !imageFile || !categoryId) {
            console.warn("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö", { name, price, imageFile, categoryId });
            return res.status(400).json({
                message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ name, price, ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (categoryId)",
            });
        }

        const parsedPrice = parseFloat(price);
        const parsedCategoryId = parseInt(categoryId);

        // ‚úÖ log ‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏õ‡∏•‡∏á
        console.log("üíµ price:", parsedPrice);
        console.log("üè∑Ô∏è categoryId:", parsedCategoryId);

        if (isNaN(parsedPrice) || parsedPrice <= 0) {
            return res.status(400).json({
                message: "price ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0",
            });
        }

        if (isNaN(parsedCategoryId)) {
            return res.status(400).json({ message: "categoryId ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç" });
        }

        // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏à‡∏≠‡πÑ‡∏´‡∏°
        const existingCategory = await prisma.category.findUnique({
            where: { id: parsedCategoryId },
        });

        if (!existingCategory) {
            console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ID:", parsedCategoryId);
            return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" });
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à log ‡∏Å‡πà‡∏≠‡∏ô insert DB
        console.log("üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π:", {
            name,
            price: parsedPrice,
            description,
            image: imageFile.path,
            publicId: imageFile.filename,
            categoryId: parsedCategoryId,
        });

        const newMenu = await prisma.menu.create({
            data: {
                name,
                price: parsedPrice,
                description,
                image: imageFile.path,
                publicId: imageFile.filename,
                category: {
                    connect: { id: parsedCategoryId },
                },
            },
        });

        res.status(201).json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", menu: newMenu });
    } catch (err) {
        res.status(500).json({
            message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô server",
            error: err.message,
            stack: err.stack, // ‚úÖ ‡∏™‡πà‡∏á stack trace ‡∏°‡∏≤‡πÄ‡∏•‡∏¢
            body: req.body,   // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° body ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
            file: req.file,   // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå
        });
    }

};


exports.listMenu = async (req, res) => {
    try {
        const menus = await prisma.menu.findMany()

        if (menus.length === 0) {
            return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' })
        }

        res.status(200).json({ message: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π', menus })

    } catch (err) {
        console.error('ListMenu Error:', err);
        res.status(500).json({ message: 'Server Error' })
    }
}

exports.updateMenu = async (req, res) => {
    try {
        const { id } = req.params;
        const name = req.body.name ? xss(req.body.name) : undefined;
        const price = req.body.price ? validator.toFloat(xss(req.body.price)) : undefined;
        const description = req.body.description ? xss(req.body.description) : undefined;
        const status = req.body.status ? xss(req.body.status) : undefined;
        const imageFile = req.file;

        const menuId = validator.toInt(xss(id));
        if (isNaN(menuId)) {
            return res.status(400).json({ message: "ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        const existingMenu = await prisma.menu.findUnique({
            where: { id: parseInt(id) }
        });

        if (!existingMenu) {
            return res.status(404).json({ message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ${id}` });
        }

        const updatedData = {};
        if (name) updatedData.name = name;
        if (price) updatedData.price = parseFloat(price);
        if (description) updatedData.description = description; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

        if (status) {
            const allowedStatuses = ["‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà", "‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß"];
            if (!allowedStatuses.includes(status)) {
                return res.status(400).json({ message: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
            }
            updatedData.status = status;
        }

        if (imageFile) {
            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà ‚Üí ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô cloudinary
            if (existingMenu.publicId) {
                await cloudinary.uploader.destroy(existingMenu.publicId);
            }

            updatedData.image = imageFile.path;
            updatedData.publicId = imageFile.filename;
        }

        const updatedMenu = await prisma.menu.update({
            where: { id: parseInt(id) },
            data: updatedData
        });

        res.status(200).json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", menu: updatedMenu });
    } catch (err) {
        console.error("UpdateMenu Error:", err);
        res.status(500).json({ message: "Server Error" });
    }
};

exports.deleteMenu = async (req, res) => {
    try {
        const rawId = xss(req.params.id);
        const menuId = validator.toInt(rawId);

        if (isNaN(menuId)) {
            return res.status(400).json({ message: 'ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        }

        const existingMenu = await prisma.menu.findUnique({
            where: { id: menuId },
        });

        if (!existingMenu) {
            return res.status(404).json({ message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ${menuId}` });
        }

        if (existingMenu.publicId) {
            await cloudinary.uploader.destroy(existingMenu.publicId);
        }

        await prisma.menu.delete({
            where: { id: menuId },
        });

        res.status(200).json({
            message: `‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π ID ${menuId} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ö‡∏ô Cloudinary ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß`,
        });

    } catch (err) {
        console.error('‚ùå DeleteMenu Error:', err);
        res.status(500).json({ message: 'Server Error' });
    }
};