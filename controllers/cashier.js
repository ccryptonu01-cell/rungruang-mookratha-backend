const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()
const { notifyAdminAndCashier } = require("../utils/notification")
const xss = require('xss');
const validator = require('validator');

// Reservations
exports.CashierListReservations = async (req, res) => {
    try {
        const reservations = await prisma.reservation.findMany({
            include: {
                user: true,
                guestUser: true,
                table: true,
            },
            orderBy: {
                time: 'desc',
            },
        });

        res.status(200).json({ reservations });
    } catch (err) {
        console.error("CashierListReservations Error:", err);
        res.status(500).json({ message: 'Server Error' });
    }
};

exports.CashierUpdateReservation = async (req, res) => {
    try {
        const tableNumberRaw = xss(req.body.tableNumber);
        const statusRaw = xss(req.body.status);

        if (!validator.isInt(tableNumberRaw.toString(), { min: 1 })) {
            return res.status(400).json({ message: "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        const allowedStatus = ["AVAILABLE", "RESERVED", "OCCUPIED"];
        if (!allowedStatus.includes(statusRaw.toUpperCase())) {
            return res.status(400).json({ message: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        const tableNumber = parseInt(tableNumberRaw, 10);
        const status = statusRaw.toUpperCase();

        const table = await prisma.table.findUnique({
            where: { tableNumber }
        });

        if (!table) {
            return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ" });
        }

        const updatedTable = await prisma.table.update({
            where: { tableNumber },
            data: { status }
        });

        res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏ï‡πä‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", updatedTable });

    } catch (err) {
        console.error("Update Table Status Error:", err);
        res.status(500).json({ message: "Server Error" });
    }
};

exports.CashierCancelReservation = async (req, res) => {
    try {
        const rawTableNumber = xss(req.body.tableNumber);

        // üîê Validate tableNumber
        if (!validator.isInt(rawTableNumber.toString(), { min: 1 })) {
            return res.status(400).json({ message: "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        const tableNumber = parseInt(rawTableNumber, 10);

        const reservation = await prisma.reservation.findFirst({
            where: { table: { tableNumber } },
            include: { order: true }
        });

        if (!reservation) {
            return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ" });
        }

        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ orderId ‚Üí ‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
        if (reservation.orderId) {
            await prisma.order.delete({
                where: { id: reservation.orderId }
            });
        }

        await prisma.reservation.delete({
            where: { id: reservation.id }
        });

        await prisma.table.update({
            where: { tableNumber },
            data: { status: "AVAILABLE" }
        });

        res.json({ message: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡πÇ‡∏ï‡πä‡∏∞‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡∏π‡∏Å‡∏•‡∏ö" });

    } catch (err) {
        console.error("Cancel Reservation Error:", err);
        res.status(500).json({ message: "Server Error" });
    }
};

// Menu
exports.CashierlistMenu = async (req, res) => {
    try {
        //‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const menus = await prisma.menu.findMany()

        //‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á
        if (menus.length === 0) {
            return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' })
        }

        res.status(200).json({ message: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π', menus })

    } catch (err) {
        console.error('ListMenu Error:', err);
        res.status(500).json({ message: 'Server Error' })
    }
}

exports.CashierupdateMenu = async (req, res) => {
    try {
        const idRaw = req.params.id;
        const nameRaw = req.body.name;
        const priceRaw = req.body.price;

        const id = parseInt(xss(idRaw), 10);
        const name = nameRaw ? xss(nameRaw.trim()) : null;
        const price = priceRaw ? parseFloat(xss(priceRaw)) : null;

        if (!id || isNaN(id)) {
            return res.status(400).json({ message: 'ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        }

        if (!name && (price === null || isNaN(price))) {
            return res.status(400).json({ message: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ name ‡∏´‡∏£‡∏∑‡∏≠ price ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï' });
        }

        if (price !== null && (!validator.isFloat(String(price), { min: 0 }))) {
            return res.status(400).json({ message: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0' });
        }

        const existingMenu = await prisma.menu.findUnique({
            where: { id }
        });

        if (!existingMenu) {
            return res.status(404).json({ message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ${id}` });
        }

        const updatedMenu = await prisma.menu.update({
            where: { id },
            data: {
                name: name || existingMenu.name,
                price: price !== null ? price : existingMenu.price
            }
        });

        res.status(200).json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', menu: updatedMenu });

    } catch (err) {
        console.error('UpdateMenu Error:', err);
        res.status(500).json({ message: 'Server Error' });
    }
};

exports.CashierdeleteMenu = async (req, res) => {
    try {
        const idRaw = req.params.id;
        const idSanitized = xss(idRaw);
        const id = parseInt(idSanitized, 10);

        if (!id || isNaN(id) || !validator.isInt(String(id), { min: 1 })) {
            return res.status(400).json({ message: 'ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        }

        const existingMenu = await prisma.menu.findUnique({
            where: { id }
        });

        if (!existingMenu) {
            return res.status(404).json({ message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ${id}` });
        }

        await prisma.inventory.deleteMany({
            where: { menuId: id }
        });

        await prisma.menu.delete({
            where: { id }
        });

        res.status(200).json({ message: `‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π ID ${id} ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à` });

    } catch (err) {
        console.error('DeleteMenu Error:', err);
        res.status(500).json({ message: 'Server Error' });
    }
};

// Order 
exports.addItemOrderCashier = async (req, res) => {
    try {
        const tableNumberRaw = req.body.tableNumber;
        const itemsRaw = req.body.items;

        const tableNumber = parseInt(xss(tableNumberRaw), 10);
        const items = Array.isArray(itemsRaw)
            ? itemsRaw.map(item => ({
                menuItemId: parseInt(xss(item.menuItemId), 10),
                quantity: parseInt(xss(item.quantity), 10)
            }))
            : [];

        if (!tableNumber || !Number.isInteger(tableNumber)) {
            return res.status(400).json({ message: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        }
        if (!items || items.length === 0) {
            return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        }
        for (const item of items) {
            if (!item.menuItemId || !Number.isInteger(item.menuItemId)) {
                return res.status(400).json({ message: 'menuItemId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
            }
            if (!item.quantity || !Number.isInteger(item.quantity) || item.quantity < 1) {
                return res.status(400).json({ message: 'quantity ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0' });
            }
        }

        // ‡∏´‡∏≤‡πÇ‡∏ï‡πä‡∏∞‡∏î‡πâ‡∏ß‡∏¢‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà unique ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        const table = await prisma.table.findUnique({
            where: { tableNumber }, // ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ number: { number: tableNumber }
        });
        if (!table) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });

        const menuPrices = await prisma.menu.findMany({
            where: { id: { in: items.map(item => item.menuItemId) } },
            select: { id: true, price: true }
        });
        if (menuPrices.length !== items.length) {
            return res.status(400).json({ message: '‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
        }

        const priceMap = Object.fromEntries(menuPrices.map(m => [m.id, m.price]));
        let totalPrice = 0;
        const orderItems = items.map(item => {
            const price = priceMap[item.menuItemId] || 0;
            totalPrice += price * item.quantity;
            return { menuId: item.menuItemId, quantity: item.quantity, price };
        });

        // =================== ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ó‡∏£‡∏≤‡∏ô‡πÅ‡∏ã‡∏Å‡∏ä‡∏±‡∏ô ===================
        const result = await prisma.$transaction(async (tx) => {
            // 1) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
            const order = await tx.order.create({
                data: {
                    tableId: table.id,
                    status: 'PENDING',   // ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á enum ‡∏Ç‡∏≠‡∏á Order ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                    totalPrice,
                    orderItems: { create: orderItems }
                },
                include: { orderItems: true }
            });

            // 2) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏ï‡πä‡∏∞‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Table)
            //    ‡∏ñ‡πâ‡∏≤ enum ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà RESERVED ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
            try {
                await tx.table.update({
                    where: { id: table.id },   // ‡∏´‡∏£‡∏∑‡∏≠ { tableNumber }
                    data: { status: 'RESERVED' }
                });
            } catch (e) {
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå status ‡∏´‡∏£‡∏∑‡∏≠ enum ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏£‡∏≤‡∏ô‡πÅ‡∏ã‡∏Å‡∏ä‡∏±‡∏ô
                // console.warn("Skip table status update:", e?.message);
            }

            // 3) ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö orderId ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô @unique)
            await tx.reservation.upsert({
                where: { orderId: order.id },  // ‡πÉ‡∏ä‡πâ unique index
                update: {
                    tableId: table.id,
                    time: new Date(),
                    status: 'RESERVED',          // ‡πÉ‡∏ä‡πâ enum ‡∏à‡∏≤‡∏Å schema ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
                    // people: 0,                // ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô
                },
                create: {
                    orderId: order.id,
                    tableId: table.id,
                    time: new Date(),
                    status: 'RESERVED',
                    // userId: null,             // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏£‡∏ì‡∏µ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô/‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                    // guestUserId: null,
                    // people: 0,
                }
            });

            return order;
        });
        // =================== ‡∏à‡∏ö‡∏óœÅŒ±ŒΩ‡πÅ‡∏ã‡∏Å‡∏ä‡∏±‡∏ô ===================

        return res.status(201).json({
            message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            order: result,
        });

    } catch (err) {
        console.error('Add Order Error:', { code: err?.code, message: err?.message, meta: err?.meta });
        return res.status(500).json({ message: 'Server Error' });
    }
}

exports.getOrdersCashier = async (req, res) => {
    try {
        const orders = await prisma.order.findMany({
            include: {
                table: {
                    select: { tableNumber: true },
                },
                user: {
                    select: { id: true, username: true, email: true },
                },
                orderItems: {
                    select: {
                        quantity: true,
                        price: true,
                        menu: {
                            select: { name: true, price: true },
                        },
                    },
                },
            },
            orderBy: {
                createdAt: "desc",
            },
            take: 100,
        });

        res.status(200).json({ orders });

    } catch (error) {
        console.error("‚ùå Error fetching orders (Cashier):", error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå" });
    }
};


exports.updateOrderStatusCashier = async (req, res) => {
    try {
        const rawId = req.params.id;
        const rawStatus = req.body.status;

        // Validate ID
        if (!rawId || isNaN(rawId)) {
            return res.status(400).json({ message: 'ID ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        }

        // Sanitize & Validate status
        const status = xss(rawStatus?.trim());
        const allowedStatuses = ["PENDING", "COMPLETED", "CANCELLED"];

        if (!status || !allowedStatuses.includes(status.toUpperCase())) {
            return res.status(400).json({ message: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        }

        const id = parseInt(rawId);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ order ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const order = await prisma.order.findUnique({ where: { id } });

        if (!order) {
            return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠' });
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        const updatedOrder = await prisma.order.update({
            where: { id },
            data: { status: status.toUpperCase() },
        });

        res.status(200).json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', updatedOrder });

    } catch (err) {
        console.error('Update Order Status Error:', err);
        res.status(500).json({ message: 'Server Error' });
    }
};

exports.cancelOrderCashier = async (req, res) => {
    try {
        // sanitize ‡πÅ‡∏•‡∏∞ validate id
        const rawId = req.params.id;
        const sanitizedId = xss(rawId?.trim());

        if (!sanitizedId || !validator.isInt(sanitizedId, { min: 1 })) {
            return res.status(400).json({ message: 'ID ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        }

        const id = parseInt(sanitizedId, 10);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ order ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const order = await prisma.order.findUnique({
            where: { id }
        });

        if (!order) {
            return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ' });
        }

        // ‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
        await prisma.order.delete({
            where: { id }
        });

        res.json({ message: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });

    } catch (err) {
        console.error("Cancel Order Error:", err);
        res.status(500).json({ message: 'Server Error' });
    }
};

exports.getOrderStatusCashier = async (req, res) => {
    try {
        const rawOrderId = req.params.orderId;
        const sanitizedOrderId = xss(rawOrderId?.trim());

        if (!sanitizedOrderId || !validator.isInt(sanitizedOrderId, { min: 1 })) {
            return res.status(400).json({ message: "‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        const orderId = parseInt(sanitizedOrderId, 10);
        const userId = req.user.id;
        const userRole = req.user.role;

        const order = await prisma.order.findUnique({
            where: { id: orderId },
            include: {
                user: true,
                orderItems: {
                    include: { menu: true }
                }
            }
        });

        if (!order) {
            return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ" });
        }

        if (userRole !== "ADMIN" && order.userId !== userId) {
            return res.status(403).json({ message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ" });
        }

        res.json({
            orderId: order.id,
            user: {
                id: order.user.id,
                username: order.user.username,
                email: order.user.email
            },
            totalPrice: order.totalPrice,
            paymentStatus: order.paymentStatus,
            paymentMethod: order.paymentMethod,
            createdAt: order.createdAt,
            orderItems: order.orderItems.map(item => ({
                menuId: item.menu.id,
                menuName: item.menu.name,
                quantity: item.quantity,
                price: item.price
            }))
        });

    } catch (error) {
        console.error("Get Order Status Error:", error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå" });
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
exports.updatePaymentStatusCashier = async (req, res) => {
    try {
        const rawId = req.params.id;
        const rawStatus = req.body.status;

        const sanitizedId = xss(rawId?.trim());
        const sanitizedStatus = xss(rawStatus?.trim());

        if (!sanitizedId || !validator.isInt(sanitizedId, { min: 1 })) {
            return res.status(400).json({ message: "ID ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        const allowedStatus = ["‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå"];
        if (!allowedStatus.includes(sanitizedStatus)) {
            return res.status(400).json({ message: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        const orderId = parseInt(sanitizedId, 10);

        const order = await prisma.order.findUnique({ where: { id: orderId } });
        if (!order) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ" });

        const updatedOrder = await prisma.order.update({
            where: { id: orderId },
            data: { paymentStatus: sanitizedStatus },
        });

        return res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", order: updatedOrder });
    } catch (error) {
        console.error("Cashier Status Update Error:", error);
        return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" });
    }
};

exports.updatePaymentMethodByCashier = async (req, res) => {
    const user = req.user;

    if (user.role !== "CASHIER") {
        return res.status(403).json({ message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ" });
    }

    const rawId = req.params.id;
    const rawMethod = req.body.paymentMethod;

    const sanitizedId = xss(rawId?.trim());
    const sanitizedMethod = xss(rawMethod?.trim());

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
    if (!sanitizedId || !validator.isInt(sanitizedId, { min: 1 })) {
        return res.status(400).json({ message: "ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô string
    if (!sanitizedMethod || typeof sanitizedMethod !== "string") {
        return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    try {
        const updated = await prisma.order.update({
            where: { id: parseInt(sanitizedId, 10) },
            data: { paymentMethod: sanitizedMethod },
        });

        return res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", order: updated });
    } catch (err) {
        console.error("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
        return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
    }
};

exports.updateOrderByCashier = async (req, res) => {
    try {
        const rawId = req.params.id;
        const rawItems = req.body.items;

        const sanitizedId = xss(rawId?.toString().trim());

        if (!sanitizedId || !validator.isInt(sanitizedId, { min: 1 })) {
            return res.status(400).json({ message: "ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        if (!Array.isArray(rawItems) || rawItems.length === 0) {
            return res.status(400).json({ message: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô items
        const items = rawItems.map((item, index) => {
            const sanitizedMenuId = xss(item.menuItemId?.toString().trim());
            const sanitizedQty = xss(item.quantity?.toString().trim());

            if (
                !sanitizedMenuId || !validator.isInt(sanitizedMenuId, { min: 1 }) ||
                !sanitizedQty || !validator.isInt(sanitizedQty, { min: 1 })
            ) {
                throw new Error(`‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà ${index + 1} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`);
            }

            return {
                menuItemId: parseInt(sanitizedMenuId, 10),
                quantity: parseInt(sanitizedQty, 10),
            };
        });

        const existingOrder = await prisma.order.findUnique({
            where: { id: parseInt(sanitizedId, 10) },
            include: { orderItems: true },
        });

        if (!existingOrder) {
            return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå" });
        }

        // ‡∏•‡∏ö orderItems ‡πÄ‡∏Å‡πà‡∏≤
        await prisma.orderItem.deleteMany({
            where: { orderId: existingOrder.id },
        });

        // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà
        const menuPrices = await prisma.menu.findMany({
            where: { id: { in: items.map(item => item.menuItemId) } },
            select: { id: true, price: true },
        });

        const priceMap = {};
        menuPrices.forEach(menu => {
            priceMap[menu.id] = menu.price;
        });

        let totalPrice = 0;
        const newItems = items.map(item => {
            const price = priceMap[item.menuItemId] || 0;
            totalPrice += price * item.quantity;
            return {
                menuId: item.menuItemId,
                quantity: item.quantity,
                price,
            };
        });

        const updatedOrder = await prisma.order.update({
            where: { id: existingOrder.id },
            data: {
                totalPrice,
                orderItems: {
                    create: newItems,
                },
            },
            include: { orderItems: true },
        });

        res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", order: updatedOrder });

    } catch (error) {
        console.error("Update Order by Cashier Error:", error.message || error);
        res.status(500).json({ message: error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
    }
};

exports.getUnpaidOrders = async (req, res) => {
    try {
        const user = req.user;
        if (user.role !== "CASHIER" && user.role !== "ADMIN") {
            return res.status(403).json({ message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ" });
        }

        const unpaidOrders = await prisma.order.findMany({
            where: {
                paymentStatus: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
            },
            orderBy: {
                createdAt: "desc",
            },
            include: {
                table: {
                    select: {
                        tableNumber: true,
                        status: true
                    }
                }
            },
        });

        res.json(unpaidOrders);
    } catch (error) {
        console.error("‚ùå Error fetching unpaid orders for cashier:", error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
    }
};
